@page "/index/{Server}/{Username}/{Password}"
@using System.Data

<style>
        table, th, td {
            border: 1px solid black;
            border-collapse: collapse;
            text-align: center;
        }
        .vertical_line {
            border-left: 1px solid black;
            height:908px;
            margin-right: 3px;
        }
</style>
        <!-- Header -->
    <div style=" display: flex; flex-direction: row; padding: 16px; background-color: rgb(224, 224, 224);">
        <div style="margin: 5px;">Select database:</div>
        <select  class="col-1" style="padding:5px;" @bind="DbName">
            @foreach (var item in listOfDB)
            {
                <option value="@item">@item</option>
            }
          </select>

        <button type="submit" class="btn-primary px-3" style="margin-left:32px" @onclick="@Execute">Execute</button>
    </div>

    <div class="" style="display: flex; flex-direction: row; ">
        <!-- tree view -->
        <div style="min-width: 300px;">
            <Treeview Directorios="treeViewList.ToArray()"></Treeview>
        </div>

        <div class="vertical_line"></div>

        <!-- sql query input -->
        <div style="position: relative; height:100%">
            <div style="border: 1px solid black; width: 200px; text-align: center; border-top-right-radius: 10px; border-top-left-radius: 10px; height: 32px; padding: 3px;">
                SQLQuery1.sql
            </div>
            <div>
                <textarea style="width: 1610px; height: 500px; padding: 6px;" @bind="@Query">SELECT * FROM [Superstore].[dbo].[Products]</textarea>
            </div>
            <table style="width: 1610px;">
                <thead>
                @foreach (var columnName in columns)
                {
                    <th style="width:300px; background-color:lightgray">@columnName</th>   
                }
                </thead>
                @foreach (var row in data)
                {       
                    <tr>
                        @foreach (var cell in row)
                        {
                            <td style="width:300px">@cell</td>
                        }
                    </tr>
                }
        </table>

            <div style="display: flex; flex-direction: row; padding: 16px; background-color: rgb(224, 224, 224); position: relative; padding: 5px;">
                <b>Query executed succesfully</b>
                <div style="display: flex; flex-direction: row; margin-left: 1100px;">Elapsed: <div>@TimeElapsed milliseconds</div></div>
                <div style="display: flex; flex-direction: row; margin-left: 48px;">@RowsAffected <div style="margin-left: 6px;">rows</div></div>
                
            </div>
        </div>
    </div>

    <div>

    </div>

@code {
    List<string> listOfDB = new List<string>();
    List<string> listOfColumns  = new List<string>(); //this list gets lists of columns in wrong sequence
    List<string> columns = new List<string>(); //this list gets lists of columns in proper sequence
    List<List<string>> data = new List<List<string>>();
    List<TreeView> treeViewList = new List<TreeView>();
    public long TimeElapsed { get; set; }
    public int RowsAffected { get; set; }
    public string DbName { get; set; }
    [Parameter]public string Username { get; set; } = "";
    [Parameter]public string Password { get; set; } ="";
    [Parameter]public string Server { get; set; }


    public string Query { get; set; }     

    protected async override Task OnInitializedAsync()
    {
        GetListOfDB();

        foreach (var databaseName in listOfDB)
        {
            var tree = new TreeView(databaseName, GetListOfTablesFromDB(databaseName).ToArray(), new string[]{});
            treeViewList.Add(tree);
        }

    }   

    private void ExecuteQuery(string query, string DbName)
    {
        string tableName = GetTableName(query);
        listOfColumns = GetListOfColumnsFromDB(DbName, tableName);

        using (var connection = new SqlConnection())
        {
            connection.ConnectionString = "Server=(localdb)\\MSSQLLocalDB;User Id=user;Password=password;Trusted_Connection=true;Database=" + DbName + ";";
            connection.Open();
            connection.StatisticsEnabled = true;

            var stats = connection.RetrieveStatistics(); 

            using(SqlCommand command = new SqlCommand())
            {
                command.CommandText = query;
                command.Connection = connection;

                var obj = command.ExecuteReader();

                for(int i=0;i<obj.FieldCount;i++)
                {
                    columns.Add(obj.GetName(i));
                }

                while (obj.Read())
                {

                    var temp = new List<string>();
                    for(int i = 0; i < obj.GetValues(new Object[100]); i++)
                    {
                        temp.Add(obj.GetValue(i).ToString());
                    }
                    data.Add(temp);
                }
            }
            
            stats = connection.RetrieveStatistics(); 
            TimeElapsed = (long) stats["ExecutionTime"];
        }
    }


    private List<string> GetListOfDB()
    {
        using (SqlConnection con = new SqlConnection())
        {
            con.ConnectionString = "Server=(localdb)\\MSSQLLocalDB;User Id=user;Password=password;Trusted_Connection=true;";
            con.Open();

            using (SqlCommand cmd = new SqlCommand("SELECT name from sys.databases", con))
            {
                using (IDataReader dr = cmd.ExecuteReader())
                {
                    while (dr.Read())
                    {
                        listOfDB.Add(dr[0].ToString());
                    }
                }

            }
        }
        return listOfDB;
    }

    private List<TreeView> GetListOfTablesFromDB(string DbName)
    {
        using (var con = new SqlConnection())
        {
            con.ConnectionString = "Server=(localdb)\\MSSQLLocalDB;User Id=user;Password=password;Trusted_Connection=true;Database=" + DbName + ";";
            con.Open();

            List<TreeView> list = new List<TreeView>();
            DataTable dt = con.GetSchema("Tables");

            foreach (DataRow row in dt.Rows)
            {
                string tablename = (string)row[2];

                list.Add(new TreeView(tablename, new TreeView[] { },  GetListOfColumnsFromDB(DbName, tablename).ToArray()));
            }

            return list;
        }
    }

    private List<string> GetListOfColumnsFromDB(string DbName, string tableName)
    {
        using (var con = new SqlConnection())
        {
            con.ConnectionString = "Server=(localdb)\\MSSQLLocalDB;User Id=user;Password=password;Trusted_Connection=true;Database=" + DbName + ";";
            con.Open();

            var list = new List<string>();

            string[] restrictionsColumns = new string[3];
            restrictionsColumns[2] = tableName;
            DataTable schemaColumns = con.GetSchema("Columns", restrictionsColumns);
            foreach (System.Data.DataRow rowColumn in schemaColumns.Rows)
            {
                list.Add(rowColumn[3].ToString());
            }
            return list;
        }
    }

    private string GetTableName(string query)
    {
        var arr = query.Split(" ",  StringSplitOptions.RemoveEmptyEntries);
        string tableName = String.Empty;

        for (int i = 0; i < arr.Length; i++)
        {   
            if(arr[i].ToUpper() == "FROM")
            {
                tableName = arr[i+1];
                break;
            }
        }

        return tableName;
    }

    private void Execute()
    {
        data.Clear();
        columns.Clear();

        ExecuteQuery(Query, DbName);
    }
}
